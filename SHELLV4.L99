                        ;
                        ;*******************************************************************
                        ;
                        ;**************  Original Version *********************************
                        ;* Small/Shell: Version 1.0
                        ;*              A command processor for North Star DOS
                        ;*
                        ;* Copyright    1981  J. E. Hendrix
                        ;*              All rights reserved
                        ;
                        ;* Written for PDS assembler
                        ;*************  TMS 9900 Version  *******************************************
                        ;
                        ;	SHELL VER 4.0.00
                        ;	FOR THE TMS9900 SERIES COMPUTER
                        ;	MODERN REVS	
                        ;	01. ADDED FILENAME EXTENSION HANDLING 4 JUNE 2010
                        ;	02  ADDED INTERNAL COMMANDS, DIR, SAVE, ERA
                        ;	04  LOAD ADDRESS HEADER ADDED SO MODULES CAN BE LOADED IN OTHER MEMORY SEGMENTS
                        ;
                        ;	SHELL VER 4.0
                        ;	ALIGN VERSIONS WITH BDOS ETC UP TO VERSION 4
                        ;
                        ;*********************************************************************
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
                        ;R7	EQU	7   CAN'T USE R7 AS IT IS RESERVED
  0008                  R8	EQU	8
  0009                  R9	EQU	9
  000A                  R10	EQU	10
  000B                  R11	EQU	11
  000C                  R12	EQU	12
  000D                  WP	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
  000A                  SP	EQU	10
                        ;
                        ;----Define  Extended Operations
                        ;
                        ;	DEFINE SOME XOP'S
                        ;
                        	DXOP	SETREG,2
                        	DXOP	PUSHREG,4
                        	DXOP	POPREG,5	
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8
                        	DXOP	POP,9
                        	DXOP	WHEX,10		;WRITE OUT A 16 BIT HEX VALUE
                        	DXOP	RHEX,11		;READ IN A 16 BIT HEX VALUE
                        	DXOP	WRITE,12		;WRITE CHAR IN MSB
                        	DXOP	READ,13		;READ CHAR IN MSB
                        	DXOP	MESG,14		;OUTPUT NULL TERMINATED MESSAGE
                        	DXOP	DEBUG,15
                        ;
                        ; OPERATING SYSTEM EQUATES
                        
                        ;
  C300                  SHELL:	EQU	0C300H
  D100                  BDOS:	EQU	0D100H
  F000                  MONITOR:	EQU	0F000H
                        
                        ;
                        ; SET UP STACK SPACE AND WORKSPACE
                        ;
  0230                  WORKSP:	EQU	0230H
  0500                  STACKP:	EQU	0500H
  0500                  TPA:	EQU	0500H
                        ;
                        ; SHELL ENTRY POINT
                        ;
  C300                  	AORG	SHELL
  C300   0460 C31A      	B	@INIT		;COLD START
                        ;
                        ;LOW MEMORY GLOBALS ETC
                        ;
  00A0                  CMDL_PTR:	EQU	0A0H		;ADDRESS OF SYSTEM COMMAND LINE
  00A2                  CMDL_SIZE:	EQU	0A2H		;WORD HOLDS THE LENGTH OF THE COMMAND LINE
  00A4                  BUFVECT: 	EQU	0A4H		;ADDRESS OF SYSTEM BUFFER
  00A6                  FREEMEM:	EQU	0A6H		;FREE MEMORY ADDRESS - USED IN MONITOR
  00B0                  MEMLIMIT:	EQU	0B0H		;THIS IS THE BOTTOM OF TPA
  0200                  BUFFSIZ:	EQU	512		;ADD TWO BYTES AS A SAFETY BUFFER
                        ;
  0080                  SHELLBV:	EQU	80H		;SHELL VECTORS
  0084                  BDOSV:	EQU	84H		;BDOS VECTORS (Workspace vector is not used)
                        ;
  0040                  CLSZ:	EQU	64		;MAX LENGTH OF COMMAND LINE
  0200                  BYTSEC:	EQU	512		;BYTES/SECTOR
                        
                        ;
                        ; ALL SYSTEM CALLS ARE TO BDOS ONLY AND NO CALLS TO THE MONITOR ARE PERMITTED
                        ;
  0001                  CIN	EQU	1
  0002                  COUT	EQU	2			;CONSOLE OUTPUT
  000E                  SELDSK	EQU	14
  0014                  RDSEQ	EQU	20
  000F                  FOPEN	EQU	15
  0010                  FCLOSE	EQU	16
  0011                  SEARCH1	EQU	17
  0012                  SEARCH2	EQU	18
  0013                  ERAFIL	EQU	19
  0015                  WRSEQ	EQU	21
  0016                  MAKFIL	EQU	22
  001A                  SETDMA	EQU	26
  001B                  MLOAD	EQU	27 	;
  0000                  HDERR	EQU	0		;HARD DISK ERROR BRANCH
  0000                  DOSERR	EQU	0		;DLOOK FILENAME ERROR BRACH
                        ;
                        ;
                        ;---FCB	EQUATES
                        ;
  0000                  NAM	EQU	0	
  000B                  FTY	EQU	11			;TYPE 
  0010                  FLA	EQU	16			;FILES LOAD ADDRESS
  001A                  CRN	EQU	26	 		;NEXT RECORD TO READ/WRITE 
  0018                  CBN	EQU	24	 		;CURRENT BLOCK NUMBER
  001C                  RELB	EQU	28			;RANDOM ACCESS RELATIVE BLOCK NUMBER
  001E                  RELR	EQU	30			;RELATIVE RECORD NUMBER
  000C                  FSB	EQU	12			;FILE STARTING BLOCK
  000E                  FSZ	EQU	14			;FILE SIZE IN SECTORS
                        ;
                        ;-----------------------------
                        ; MISC. ASSEMBLY CONSTANTS
                        ;-----------------------------
                        ;
  0200                  BLKSIZ	EQU	512			;DISK BLOCK SIZE
  000B                  NAMSIZ	EQU	11			;DIRECTORY NAME SIZE
  0003                  EXTSIZ	EQU	3			;EXTENSION SIZE
  0001                  DDEN	EQU	1			;DRIVE DENSITY
  0001                  DCOMR	EQU	1			;DOS READ COMMAND
  0000                  PAD	EQU	0			;SMALL-VM PAD CHAR
  C304   03             CTLC	BYTE	03H	 		;^C
  C305   18             CTLX	BYTE    	18H	 		;^X
  C306   13             CTLS	BYTE	13H			;^S
  C307   19             CTLY	BYTE	19H			;^Y
  C308   1A             CTLZ	BYTE	1AH			;^Z
  C309   20             SPACE	BYTE	20H			;SPACE CHAR
  C30A   00             	BYTE	0			;ALLOWS IT TO BE USED IN MESSAGES
  C30B   08             BS	BYTE	08H			;BACK SPACE
  C30C   0D             CR	BYTE	0DH
  C30D   0A             LF	BYTE	0AH
  C30E   07             DEL	BYTE	07H					;DELETE CHAR
  C30F   FF             EOF	BYTE	0FFH			;END OF FILE 
  C310   3A             COMT	BYTE	3AH	 		;COMMENT FLAG
  C311   2E             JUMP	BYTE	'.'	 		;JUMP TO LOADED PROG
  C312   2E             NULPARM	BYTE	'.'			;NULL PARAMETER FLAG
  C313   2E             EXT	BYTE	'.'			;EXTENSION 
  C314   5F             NOTE	BYTE	'_'	 		;OPERATOR NOTE FLAG
  C315   25             PROM	BYTE 	'%'	 		;PROMPT CHAR
  C316   24             SUBMARK	BYTE	'$'	 		;MARKS SYMBOLIC PARAM IN PROC FILE
  C317   2A             SYSFILE	BYTE	'*'	 		;IDENTIFIES A SYSTEM FILE
  C318   2B             DOSCMD	BYTE	'+'			;DOS COMMAND
  0000                  CONSOLE	EQU	0			;CONSOLE DEVICE
  0002                  EXEC	EQU	2			;TYPE OF EXECUTABLE FILE
  0005                  PROC	EQU	5		 	;TYPE OF PROCEDURE FILE
  0000                  DEFDRV	EQU	0			;DEFAULT DRIVE FOR PROC
                        ;
                        ;	INITIALISATION - SET UP LOCAL AND PROGRAMME WORKSPACE AND VECTORS AND THEN CALL 
                        ;	MONITOR
                        ;	PROGRAMMES THAT CHANGE WORKSPACE CANNOT ENTER VIA RETURN BUT MUST COME THROUGH HERE
                        ;	HAVE COME HERE THROUGH A WARM BOOT/MONITOR AND THAT INTERRUPT VECTORS ARE SET
                        ;
  C319   00             	EVEN
  C31A   0209 0000      INIT	LI	R9,0		;CLEAR SEGMENT REGISTER
  C31E   2C80           	SETREG
  C320   02E0 0230      	LWPI	WORKSP		;THIS WORKSPACE IS USED BY ALL LOADED PROGRAMMES
  C324   020A 0500      	LI	SP,STACKP		;STACK LOCATION
  C328   04CF           	CLR	R15		;CLEAR STATUS
  C32A   D820 C30C      	MOVB	@CR,@CMDLINE		;NO AUTOBOOT AT PRESENT
  C32E   CC66           
  C330   0200 CC66      	LI	R0,CMDLINE
  C334   C800 00A0      	MOV	R0,@CMDL_PTR		;COMMAND LINE POINTER
  C338   04E0 00A2      	CLR	@CMDL_SIZE		;ZERO THE COMMAND LINE SIZE
                        ;	LI	R0,CMDL_SIZE		;PATCH THE COMMAND LINE SIZE VECTOR
                        ;	MOV	R0,@CMDL_SIZE_PTR
  C33C   0200 CCD0      	LI	R0,MBUF		;SYSTEM BUFFER
  C340   C800 00A4      	MOV	R0,@BUFVECT
                        ;
                        ; PATCH SHELL RETURN VECTOR 
                        ;
  C344   0200 0460      INIT22	LI	R0,0460H		;BRANCH INSTRUCTION 
  C348   0201 C4F4      	LI	R1,RETURN		;INSERT BRANCH VECTORS	
  C34C   C800 0080      	MOV	R0,@SHELLBV
  C350   C801 0082      	MOV	R1,@SHELLBV+2
                        ;
                        ; PATCH BDOS VECTORS - NOTE THE WORKSPACE IS NOT USED
                        ;
  C354   0200 0460      	LI	R0,0460H		;BRANCH OPCODE
  C358   0201 D100      	LI	R1,BDOS		;ADDRESS OF BDOS IN MEMORY
                        
  C35C   C800 0084      	MOV	R0,@BDOSV		;BDOS BRANCH VECTOR INSTRUCTION
  C360   C801 0086      	MOV	R1,@BDOSV+2		;BDOS VECTOR
                        ;
                        ; 	PATCH FREEM MEMORY VECTORS
                        ; 	TOP OF FREE MEMORY - RESET BY SHELL WHEN LOADING PROGS FROM DOS
                        ;
  C364   0200 0500      	LI	R0,TPA		;START OF FREEMEM WHEN NO PROGRAMMES ARE LOADED
  C368   C800 00A6      	MOV	R0,@FREEMEM
  C36C   0200 C300      	LI	R0,SHELL		;SET THE MEMORY LIMIT
  C370   C800 00B0      	MOV	R0,@MEMLIMIT
                        	;
                        ;
                        ; NOW SIGN ON
                        ;
                        ;
  C374   2FA0 CED6      	MESG	@SINON		;PRINT SIGN ON MESSAGE
                        ;
                        ;	FALL INTO DOCMD
                        ;
                        ;---------------------------------------
                        ;	DO NEXT SHELL COMMAND
                        ;---------------------------------------
                        ;
  C378   C020 CC5A      DOCMD	MOV	@SKIPSW,R0	 	;SKIP THIS CMD?
  C37C   04E0 CC5A      	CLR	@SKIPSW
  C380   C000           	MOV	R0,R0
  C382   1616           	JNE	DOCMD2A		;YES
  C384   04C1           	CLR	R1
  C386   D060 CC66      	MOVB	@CMDLINE,R1
  C38A   9801 C30C      	CB	R1,@CR		;IS 1ST BYTE OF CMD A CR ?
  C38E   1310           	JEQ	DOCMD2A	 	;YES-IGNORE CMD
                        
  C390   0281 0000      CHKSYS	CI	R1,0		;(MUST USE TWO WORDS) SYS FILE?<<ALTERED AFTER BOOT>>
  C394   1602           	JNE	DOCMD1	 	;NO
  C396   0460 CAEA      	B	@CMDERR	 	;YES
                        ;
                        ;	RETURN TO MONITOR ?
                        ;
  C39A   9801 C305      DOCMD1	CB	R1,@CTLX	 	;^X?
  C39E   1602           	JNE	DOCMDAA		 ;NO
  C3A0   0420 F000      	BLWP	@MONITOR
  C3A4   9801 C307      DOCMDAA	CB	R1,@CTLY		;^Y
  C3A8   1600           	JNE	DOCMD2
                        ;
                        ;
                        ;	LEADING CHAR <=SPACE ?
                        ;
  C3AA   9801 C309      DOCMD2	CB	R1,@SPACE	 
  C3AE   1B02           	JH	DOCMD4		;NO
                        ;
  C3B0   0460 C51C      DOCMD2A	B	@NEXTCMD	 	;YES
                        ;
                        ;  TO JUMP TO THE LAST LOADED PROGRAMME AT TPA, JUST TYPE '.'.  TO LOAD
                        ;  A PROGRAMME FROM DISC, THEN TYPE '.PROGRAMME NAME'
                        ;
  C3B4   9801 C311      DOCMD4	CB	R1,@JUMP		;'.'
  C3B8   1607           	JNE	DOCMD3	
  C3BA   0203 CC67      	LI	R3,CMDLINE+1
  C3BE   9813 C309      	CB	*R3,@SPACE		;2ND BYTE A GRAPHIC?
  C3C2   1B0F           	JH	DLOOK1	 	;YES,LOAD
  C3C4   0460 C4D0      	B	@GOPROG	 	;NO,JUMP
                        ;
                        ;******************************************
                        ;
                        ;	DOS COMMAND  '+FILENAME'
                        ;
                        ;********************************************
                        ;
  C3C8   9801 C318      DOCMD3	CB	R1,@DOSCMD
  C3CC   1602           	JNE	LOOK
                        ;
                        ; PROCESS DOS COMMAND HERE
                        ;
                        DOCMD9	;MAY USE LATER
  C3CE   0460 C4F4      	B	@RETURN
                        ;	
                        ;
                        ;	LOOKUP NAMED FILE
                        ;
  C3D2   0203 0000      LOOK	LI	R3,DEFDRV
  C3D6   0202 000E      	LI	R2,SELDSK
  C3DA   2DA0 D100      	CALL	@BDOS
  C3DE   0203 CC66      	LI	R3,CMDLINE	 	;R3->FILENAME
  C3E2   0204 CFD0      DLOOK1	LI	R4,FCB	 	;POINT TO FCB
  C3E6   0202 000B      	LI	R2,NAMSIZ 		;NAME LENGTH
  C3EA   9813 C309      DLOOK2	CB	*R3,@SPACE
  C3EE   1212           	JLE	DLOOK3	 	;NON GRAPHIC
                        ;
                        ;DETECT FILE EXTENSION - IF NONE ASSUME .EXE/COM
                        ;
  C3F0   9813 C313      	CB	*R3,@EXT		;'.'?
  C3F4   160B           	JNE	DLOOK5
                        ;
                        ;	PAD TO FILL TO EXT - ASSUME USER WILL ALWAYS TYPE IN EXTENSION IF NEEDED
                        ;	THIS ALLOWS RUN.EXE TO BE PADDED TO 'RUN     EXE'
                        ;
  C3F6   0583           	INC	R3		;JUMP OVER '.'
  C3F8   0222 FFFD      	AI	R2,-EXTSIZ		;EXTENSION ARE 3 BYTES LONG
  C3FC   1A37           	JL	LOOKERR		;ASSUME EXT IS PART OF FILENAME
  C3FE   1304           	JEQ	DLOOK7
  C400   DD20 C309      DLOOK6	MOVB	@SPACE,*R4+ 	;PAD WITH SPACES
  C404   0602           	DEC	R2
  C406   16FC           	JNE	DLOOK6
  C408   0202 0003      DLOOK7	LI	R2,EXTSIZ		;RESET TO COPY EXTENSION CHARS
  C40C   DD33           DLOOK5	MOVB	*R3+,*R4+		;No
  C40E   0602           	DEC	R2
  C410   16EC           	JNE	DLOOK2	 	;KEEP GOING
  C412   1004           	JMP	DLOOK4
  C414   DD20 C309      DLOOK3	MOVB	@SPACE,*R4+ 	;PAD WITH SPACES
  C418   0602           	DEC	R2
  C41A   16FC           	JNE	DLOOK3
  C41C   2DA0 C5E4      DLOOK4	CALL	@ICMD		;LOOK FOR INTERNAL COMMAND
  C420   0203 CFD0      	LI	R3,FCB	 	;SET FDC PTR
  C424   0202 0011      	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C428   2DA0 D100      	CALL	@BDOS	 	;TRY TO FIND A FILE
  C42C   C041           	MOV	R1,R1	 	;SUCCESS ?
  C42E   111E           	JLT	LOOKERR		;NO FILES ON DISC
  C430   0202 000F      	LI	R2,FOPEN		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C434   0203 CFD0      	LI	R3,FCB
  C438   2DA0 D100      	CALL	@BDOS		;OPEN FILE
  C43C   C041           	MOV	R1,R1		;FOUND?
  C43E   1116           	JLT	LOOKERR	 	;NO
  C440   0204 CFD0      	LI	R4,FCB
  C444   C103           	MOV	R3,R4		;COPY FCB
  C446   C824 000E      	MOV	@FSZ(R4),@MFSZ 		;FILE SIZE
  C44A   CCBE           
  C44C   D024 000B      	MOVB	@FTY(R4),R0
  C450   0980           	SRL	R0,8
  C452   C800 CCBC      	MOV	R0,@MFTY		; 
  C456   130C           	JEQ	LOAD		;ZERO BYPASSES CHECKS
  C458   0240 0007      	ANDI	R0,7	 	;MASK TYPE BITS
  C45C   0280 0002      	CI	R0,2		;EXECUTABLE ?
  C460   1307           	JEQ	LOAD	 	;YES
  C462   0280 0005      	CI	R0,5	 	;PROCEDURE TYPE?
  C466   1602           	JNE	LOOKERR		;NO
  C468   0460 CB34      	B	@DOPROC
  C46C   0460 CAEA      LOOKERR	B	@CMDERR	 	;NO-TOO BAD
                        ;
                        ;=================================================================================================
                        ;
                        ;	LOAD EXECUTABLE	FILE.
                        ;
                        ;==================================================================================================
                        ;
  C470   04C1           LOAD	CLR	R1	 	;DISABLE PROG REENTRY
  C472   D801 CC64      	MOVB	R1,@CMDLINE-2
                        ;
                        ; NOW THE FILE MODULES IF THEY EXIST;
                        ; FLA (FILE LOAD ADDRESS)	0  NO LOAD ADDRESS SPECIFIED, LOAD WHEREVER YOU WISH
                        ;		-1 CALL MLOAD TO LOAD MULTIPLE MODULES OR TO USE SEGMENTED MEMORY
                        ;		NZ NON ZERO, ASSUME LOAD ADDRESS AND LOAD TO THIS ADDRESS
                        ;
                        
  C476   0204 CFD0      LOAD3	LI	R4,FCB
                        ;
                        ; BYPASS MLOAD FOR TIME BEING
                        ;
                        ;	JMP	LOAD4
                        
  C47A   C0E4 0010      	MOV	@FLA(R4),R3		;GET LOAD ADDRESS
  C47E   1302           	JEQ	LOAD4
  C480   0583           	INC	R3		;IS IT -1?
  C482   1303           	JEQ	LOAD5
                        ; 	JMP	LOAD2		;USE THE LOAD ADDRESS IN FLA
  C484   0203 0500      LOAD4	LI	R3,TPA		;IF ZERO, USE TPA AS LOAD ADDRESS
  C488   1007           	JMP	LOAD2		;LOAD ADDRESS SPECIFIED
                        	;
                        	; IF FLA = -1  CALL MLOAD
                        	;
  C48A   0202 001B      LOAD5	LI	R2,MLOAD		;FIRST MODULE ALWAYS LOADS AT 0500H
  C48E   0203 CFD0      	LI	R3,FCB
  C492   2DA0 D100      	CALL	@BDOS		;BDOS WILL RETURN FREEMEM IN R3
  C496   1016           	JMP	LOAD1
                        ;
  C498   C803 CC62      LOAD2	MOV	R3,@LADDR
  C49C   04E4 001A      	CLR	@CRN(R4)		;RECORD 0
  C4A0   2E03           LOAD0	PUSH	R3		;SAVE DMA ADDR
  C4A2   0202 001A      	LI	R2,SETDMA
  C4A6   2DA0 D100      	CALL	@BDOS
  C4AA   0202 0014      	LI	R2,RDSEQ 		;LOAD THE FILE
  C4AE   0203 CFD0      	LI	R3,FCB
  C4B2   2DA0 D100      	CALL	@BDOS
  C4B6   2E43           	POP	R3	 	;POP DMA ADDR
  C4B8   0281 FFFF      	CI	R1,-1		;LOOK FOR EOF
  C4BC   1303           	JEQ	LOAD1	 		;
  C4BE   0223 0200      	AI	R3,BLKSIZ	 	;UP DMA
  C4C2   10EE           	JMP	LOAD0	 		;
  C4C4   C803 00A6      LOAD1	MOV	R3,@FREEMEM		;THIS IS THE NEW FREE MEMORY POINTER
  C4C8   9820 CC66      	CB	@CMDLINE,@JUMP		;JUST LOAD IT?
  C4CC   C311           
  C4CE   1326           	JEQ	NEXTCMD	 	;YES
                        ;
                        ;**************************************************
                        ;
                        ;	JUMP TO LOADED PROGRAM
                        ;
                        ;***************************************************
                        ;
  C4D0   C820 CC62      GOPROG	MOV	@LADDR,@GO+2		;JUMP ADDR
  C4D4   C4F2           
  C4D6   0204 CC66      	LI	R4,CMDLINE 		;?
  C4DA   0584           GOLOOP	INC	R4	
  C4DC   9814 C309      	CB	*R4,@SPACE	 	;1ST CHAR <=SPACE?
  C4E0   1BFC           	JH	GOLOOP	 	;NO
  C4E2   04C1           	CLR	R1	 	;TELL SMALL-VM IT'S A SHELL COMMAND
  C4E4   D801 CC65      	MOVB	R1,@CMDLINE-1	;DONE
  C4E8   0200 0080      	LI	R0,SHELLBV		;RETURN ADDRESS IF NEEDED
  C4EC   2E00           	PUSH	R0
                        ;
                        ;	THIS GIVES ACCESS OF LOADED PROGRAMMES TO STACK ETC
                        ;
  C4EE   02AD           	STWP	WP		;GIVE THE CALLING PROGRAMME ACCESS TO THE WORKSPACE ADDRESS ( NEEDED IN SMALLC )
  C4F0   0460 CB00      GO	B	@SHELLERR 		;<<THIS ADDR IS ALTERED BY MOVE @GO+2>>
                        ;
                        ; R4 = RETURN CODE		
                        ;			
                        ;
                        ;	R1 IS THE RETURN CODE
                        ;	NOTE NEED TO RESTORE WP POINTERS ETC
                        ;
  C4F4   D801 CC64      RETURN	MOVB	R1,@CMDLINE-2
  C4F8   02E0 0230      	LWPI	WORKSP		;REINITIALSE WORKSPACE AND STACK POINTERS
  C4FC   020A 0500      	LI	SP,STACKP
  C500   04CF           	CLR	R15		;CLEAR STATUS
  C502   D060 CC64      	MOVB	@CMDLINE-2,R1
  C506   0881           	SRA	R1,8
  C508   0281 FFFF      	CI	R1,-1		;RETURN VIA SMALL-VM?
  C50C   1607           	JNE	NEXTCMD 		;NO
  C50E   04C1           	CLR	R1
  C510   D801 CC64      	MOVB	R1,@CMDLINE-2	;ENABLE PROGRAMME RE-ENTRY
  C514   C041           	MOV	R1,R1	 	;IS RETURN CODE ZERO?
  C516   1302           	JEQ	NEXTCMD		;YES
  C518   0460 CB22      	B	@UNPROC	 	;NO,ABORT PROC CMD IF IN PROGRESS
                        ;
                        ;-----WHERE IS NEXT COMMAND TO BE FOUND
                        ;
  C51C   D060 CC58      NEXTCMD	MOVB	@PROCSW,R1
  C520   1302           	JEQ	PROMPT
  C522   0460 C96E      	B	@PFETCH 
                        				 
                        ;
                        ;-----CONSOLE	INPUT
                        ;
  C526   D0E0 C315      PROMPT 	MOVB	@PROM,R3		;PROMPT CHARACTER INTO MSB
  C52A   2DA0 CC18      	CALL	@OUTCHAR
  C52E   0204 CC66      	LI	R4,CMDLINE 		;R4=DEST PTR
  C532   0205 0040      	LI	R5,CLSZ		;R5=CHAR COUNTER
  C536   C060 0000      CINLOOP	MOV	@CONSOLE,R1	
  C53A   2DA0 CC0C      	CALL	@INCHAR	 	; RETURN INTO MSB OF R1
  C53E   9801 C30B      	CB	R1,@BS	 	;BS?
  C542   132A           	JEQ	RUBOUT	
  C544   9801 C30E      	CB	R1,@DEL	 	;DEL?
  C548   1327           	JEQ	RUBOUT	
  C54A   9801 C304      	CB	R1,@CTLC 		;^C?
  C54E   1604           	JNE	STOWIT	 	;NO
  C550   D060 C30C      	MOVB	@CR,R1	 	;YES (CR=0DH)
  C554   D801 CC66      	MOVB	R1,@CMDLINE	 	;IGNORE CMD
                        ;
                        ;---Convert to upper case
                        ;
  C558   C001           STOWIT	MOV 	R1,R0
  C55A   0980           	SRL	R0,8
  C55C   0280 0061      	CI 	R0,61H		;'a'
  C560   1A08           	JL	STOWIT2	
  C562   0280 007A      	CI	R0,7AH		;'z'
  C566   1B05           	JH	STOWIT2
  C568   0220 FFE0      	AI	R0,-20H		;CONVERT TO LOWER CASE
  C56C   06C0           	SWPB	R0
  C56E   DD00           	MOVB	R0,*R4+
  C570   1001           	JMP	STOWIT2+2
  C572   DD01           STOWIT2	MOVB	R1,*R4+		;STORE THE CHARACTER
  C574   0605           	DEC	R5	
  C576   1223           	JLE	CIOERR		;NO MORE SPACE
  C578   9801 C309      	CB	R1,@SPACE		;CTL CHAR?
  C57C   1404           	JHE	ECHO	 	;NO,CONTINUE
  C57E   04C0           	CLR	R0
  C580   D060 C30C      	MOVB	@CR,R1		;FORCE CR
  C584   D500           	MOVB	R0,*R4 		;NULL TERMINATE
  C586   C0C1           ECHO	MOV	R1,R3		;ECHO CHAR
  C588   2DA0 CC18      	CALL	@OUTCHAR		;RETURNS CHAR IN R1 LSB
  C58C   04E0 CC5A      	CLR	@SKIPSW	 	;DOSN'T ALTER FLAGS
  C590   9801 C30D      	CB	R1,@LF	 	;OUTCHAR GENERATES AUTO LF AFTER CR
  C594   130D           	JEQ	GODOCMD	 
  C596   10CF           	JMP	CINLOOP	
  C598   0285 0040      RUBOUT	CI	R5,CLSZ	
  C59C   14CC           	JHE	CINLOOP	 	;CMDLINE IS EMPTY
  C59E   0585           	INC	R5	
  C5A0   0604           	DEC	R4	
  C5A2   2E04           	PUSH	R4	 	;PUSH R4
  C5A4   0204 CF2F      	LI	R4,RUBMSG	
  C5A8   2DA0 CC40      	CALL	@OUTSTR	 
  C5AC   2E44           	POP	R4	
  C5AE   10C3           	JMP	CINLOOP	
  C5B0   0200 CC66      GODOCMD	LI	R0,CMDLINE
  C5B4   6100           	S	R0,R4		;CALCULATE THE LENGTH OF THE COMMAND LINE USING THE POINTER IN R4
                        ;	SWPB	R4		;CAN'T BE GREATER THAN 255
  C5B6   C804 00A2      	MOV	R4,@CMDL_SIZE	;STORE CMDLINE SIZE FOR SMALL C
  C5BA   0460 C378      	B	@DOCMD	
  C5BE   0460 CAF0      CIOERR	B	@LINERR	
                        
                        ;
                        ;*****************************************************
                        ;	LOOK FOR INTERNAL COMMANDS, I.E. DIR, SAVE, ETC
                        ;	FBC -> FILENAME
                        ;
                        ;*****************************************************
                        ;
  0004                  CMDCNT	EQU 	4		;NUMBER OF POSSIBLE INTERNAL COMMANDS
  C5C2   4449 52        ICLIST	TEXT	"DIR"
  C5C5   00             	BYTE	0		;END
  C5C6   C636           	WORD	DSKDIR		;ADDRESS
  C5C8   5341 5645      	TEXT	"SAVE"
  C5CC   00             	BYTE	0		; END
  C5CD   C6D4           	WORD	DSKSAVE		;ADDRESS
  C5CF   4552 41        	TEXT	"ERA"		;ERASE
  C5D2   00             	BYTE	0		; END
  C5D3   C7F8           	WORD	ERAFILE		;ADDRESS
  C5D5   5459 5045      	TEXT	"TYPE"		;TYPE A FILE TO THE CONSOLE
  C5D9   00             	BYTE	0		; END
  C5DA   C878           	WORD	TYPEFILE		;ADDRESS
  C5DC                  	EVEN
                        ;
                        ;	MISC STORAGE
                        ;
  C5DC   0002           BUFPNT	WORD	2	 	;BUFFER POINTER
  C5DE   0002           RECCNT	WORD	2	 	;NO. OF PAGES TO SAVE
  C5E0   0002           SADDR	WORD	2		;START ADDRESS
  C5E2   2D             SWITCH	BYTE	'-'		;COMMAND LINE SWITCH
  C5E3   00             	EVEN
                        ;	
  C5E4   0201 C5C2      ICMD	LI	R1,ICLIST
  C5E8   0203 CFD0      	LI	R3,FCB		;NAME OF COMMAND
  C5EC   0205 0004      	LI	R5,CMDCNT	;NUMBER OF INTERNAL COMMANDS
  C5F0   9C73           ICMD0	CB	*R3+,*R1+
  C5F2   13FE           	JEQ	ICMD0
  C5F4   0601           	DEC	R1		;BACK UP THE POINTER
  C5F6   0603           	DEC	R3
  C5F8   9813 C309      	CB	*R3,@SPACE	;IF SPACE WE HAVE REACHED THE END OF THE FILENAME
  C5FC   1B09           	JH	ICMD1	 	;GRAPHIC CHARACTER, MEANS NO MATCH
  C5FE   D011           	MOVB	*R1,R0		;TEST FOR END OF ENTRY
  C600   1607           	JNE	ICMD1		;NO MATCH
                        ;
                        ;	MATCH HERE BRANCH TO ADDRESS
                        ;	
  C602   0581           	INC	R1		;MOVE TO ADDRESS FIELD
  C604   D0B1           	MOVB	*R1+,R2		;MSB PART OF ADDRESS
  C606   06C2           	SWPB	R2
  C608   D0B1           	MOVB	*R1+,R2
  C60A   06C2           	SWPB	R2		;ADDRESS IS NOW IN R2
  C60C   2E40           	POP	R0		;WE WON'T BE RETURNING SO POP RETURN ADDRESS
  C60E   0452           	B	*R2		;CALL THE COMMAND
                        ;
  C610   0605           ICMD1	DEC	R5		;MORE COMMANDS TO SEARCH ?
  C612   1306           	JEQ	ICMDE
                        ;
                        ; NEXT INTERNAL COMMAND
                        ;
  C614   D031           ICMD2	MOVB	*R1+,R0		; LOOK FOR TEMINATOR
  C616   16FE           	JNE	ICMD2
  C618   05C1           	INCT	R1		;POINT TO NEXT COMMAND
  C61A   0203 CFD0      	LI	R3,FCB		;R1 POINTS TO NEXT COMMAND
  C61E   10E8           	JMP	ICMD0
  C620   2DC0           ICMDE	RET			;RETURN 
                        ;
                        ;*********************************************************
                        ;
                        ; INTERNAL COMMAND DIR
                        ;
                        ;**********************************************************
                        ;
                        ;	MISC DEFINITIONS
                        ;
  C622   203A 20        BAR	TEXT	' : '
  C625   00             	BYTE	0
  C626   0D0A 00        CRLF	BYTE	0DH,0AH,0
  C629   4E4F 2046      MNOFILE	TEXT	'NO FILES'
  C62D   494C 4553      
  C631   0D0A 00        	BYTE	0DH,0AH,0
  C634                  	EVEN
  C634   0000           CCOUNT	WORD	0			;COLUMN COUNTER
                        ;
  C636                  	EVEN
                        ;
                        ; PERFORM A DIRECTORY LIST OF ALL FILES ON DRIVE
                        ;
  C636   0200 0006      DSKDIR:	LI	R0,6
  C63A   C800 C634      	MOV	R0,@CCOUNT
  C63E   0201 3F00      	LI	R1,'?'*256		;WILD CHARACTER
  C642   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  C646   0208 CFD0      	LI	R8,FCB	  		;
  C64A   C088           	MOV	R8,R2	 		;SAVE FCB
  C64C   DC81           DSKDIR0	MOVB	R1,*R2+	 		;STORE IN FCB
  C64E   0600           	DEC	R0	 		;ANY MORE ALLOWED ?
  C650   16FD           	JNE	DSKDIR0	 		;YES
                        ;
                        ;	NOW SEARCH FOR FILES
                        ;
  C652   0202 0011      	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C656   0203 CFD0      	LI	R3,FCB
  C65A   2DA0 D100      	CALL	@BDOS	 		;TRY TO FIND A FILE
  C65E   C041           	MOV	R1,R1	 		;SUCCESS ?
  C660   1132           	JLT	NOFILE			;NO FILES ON DISC
  C662   2DA0 C67C      	CALL	@PNAME			;PRINT THE NAMES	
                        ;
                        ;	CONTINUE
                        ;
  C666   0202 0012      DSKDIR1	LI	R2,SEARCH2
  C66A   0203 CFD0      	LI	R3,FCB
  C66E   2DA0 D100      	CALL	@BDOS
  C672   C041           	MOV	R1,R1
  C674   1123           	JLT	DIREXIT
  C676   2DA0 C67C      	CALL	@PNAME
  C67A   10F5           	JMP	DSKDIR1
                        ;
                        ;********************************
                        ;
                        ;	PRINT THE DIRECTORY ENTRY
                        ;
                        ;	R3 -> CURRENT DIRECTORY ENTRY	
                        ;
                        ;*********************************
                        ;
  C67C   0620 C634      PNAME	DEC	@CCOUNT
  C680   1606           	JNE	PNAME1
  C682   2FA0 C626      	MESG	@CRLF
  C686   0201 0006      	LI	R1,6
  C68A   C801 C634      	MOV	R1,@CCOUNT
                        ;
  C68E   C043           PNAME1	MOV	R3,R1			;DIRECTORY POINTER
  C690   0200 000B      	LI	R0,NAMSIZ
  C694   2E00           PNAME2	PUSH	R0
  C696   D0F1           	MOVB	*R1+,R3			;PRINT NAME
  C698   06C3           	SWPB	R3			;DO PRINTS LSB
  C69A   2E01           	PUSH	R1
  C69C   0202 0002      	LI	R2,COUT
  C6A0   2DA0 D100      	CALL	@BDOS	
  C6A4   2E41           	POP	R1
  C6A6   2E40           	POP	R0
  C6A8   0600           	DEC	R0
  C6AA   16F4           	JNE	PNAME2
  C6AC   C020 C634      	MOV	@CCOUNT,R0
  C6B0   0280 0001      	CI	R0,1			;IF LAST ENTRY ON LINE DONT BAR
  C6B4   1302           	JEQ	PNAME3
  C6B6   2FA0 C622      	MESG	@BAR
  C6BA   2DC0           PNAME3	RET
                        ;
                        ;
  C6BC   2FA0 C626      DIREXIT	MESG	@CRLF
  C6C0   04C1           	CLR 	R1			;SHOW RETURN NOT FROM VM
  C6C2   0460 C4F4      	B	@RETURN			;RETURN TO SHELL
                        ;
  C6C6   2FA0 C629      NOFILE	MESG	@MNOFILE
  C6CA   04C1           	CLR	R1			;SHOW RETURN NOT FROM VM
  C6CC   0460 CAEA      	B	@CMDERR	
                        	
                        ;
                        ;*******************************************************
                        ;
                        ; SAVE A PROGRAMME IN MEMORY TO A FILE 
                        ; SYNTAX.  OPTIONAL ARGUMENT ARE IN []
                        ;	SAVE <NUMBER OF 512 SECTORS> <FILENAME>  <-MEMORY ADDRESS>
                        ;
                        ;
                        ;
                        ;******************************************************
                        ;
                        ;BDOSRV EQUATES	
                        ;
  00A0                  CMDPTR	EQU	0A0H		;SHELL COMMAND LINE POINTER
  C6D0   0460 C892      PARSERR	B	@PARSMSG
                        
  C6D4   04E0 C5DC      DSKSAVE	CLR	@BUFPNT
  C6D8   04E0 C5DE      	CLR	@RECCNT
  C6DC   0208 0500      	LI	R8,TPA		;DEFAULT START ADDRESS
  C6E0   C808 C5E0      	MOV	R8,@SADDR
  C6E4   0208 CC66      	LI	R8,CMDLINE
  C6E8   9838 C309      START00	CB	*R8+,@SPACE	 	;JUMP OVER 'SAVE' LOOK FOR NON VALID CHARACTERS
  C6EC   1BFD           	JH	START00
  C6EE   0608           	DEC	R8	 	;BACK UP TO 1ST CHAR
  C6F0   9818 C30C      START02	CB	*R8,@CR		;EOF COMMAND?
  C6F4   13ED           	JEQ	PARSERR
  C6F6   9838 C309      	CB	*R8+,@SPACE		;NOW JUMP OVER SPACES
  C6FA   12FA           	JLE	START02
  C6FC   0608           	DEC	R8
  C6FE   C808 C5DC      	MOV	R8,@BUFPNT		;LOOK FOR NUMBER OF SECTORS
  C702   2DA0 C8B0      	CALL	@ATOD	 	;CONVERT ASCII TO DEC
  C706   C041           	MOV	R1,R1	 	;ZERO SHOWS ERROR
  C708   13E3           	JEQ	PARSERR
  C70A   C801 C5DE              MOV	R1,@RECCNT		;SAVE AS PAGE COUNT                           
  C70E   C220 C5DC      	MOV	@BUFPNT,R8
                        ;
                        ;	LOOK FOR FILE NAME
                        ;
  C712   9818 C30C      STRT01	CB	*R8,@CR		;EOL COMMAND?
  C716   13DC           	JEQ	PARSERR
  C718   9838 C309      	CB	*R8+,@SPACE 	;LOOK FOR NAME
  C71C   12FA           	JLE	STRT01
  C71E   0608           	DEC	R8	 	;BACK UP
  C720   C0C8           	MOV	R8,R3		;R3->NAME
  C722   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  C726   0208 CFD0      	LI	R8,FCB	  		;
  C72A   D620 C309      	MOVB	@SPACE,*R8		;FILL WITH SPACE
  C72E   C088           	MOV	R8,R2	 		;SAVE FCB
  C730   9813 C309      NAM0	CB	*R3,@SPACE	 	;END OF NAME ?
  C734   1207           	JLE	NAM1	 	;YES
  C736   13CC           	JEQ	PARSERR
  C738   0583           	INC	R3		;UP POINTER
  C73A   0600           	DEC	R0		;DONT STORE TOO MANY
  C73C   12F9           	JLE	NAM0
  C73E   0603           	DEC	R3
  C740   DCB3           	MOVB	*R3+,*R2+		;STORE IN FCB
  C742   10F6           	JMP	NAM0		;KEEP GOING
  C744   C000           NAM1	MOV	R0,R0
  C746   1204           	JLE	NAM2		;FCB ALREADY FULL
  C748   DCA0 C309      NAM4	MOVB	@SPACE,*R2+	 	;PAD WITH SPACES
  C74C   0600           	DEC	R0
  C74E   16FC           	JNE	NAM4
                        ;
                        ;	LOOK FOR START ADDRESS	
                        ;	IF EOL ENCOUNTERED USE DEFAULT TPA
                        ;
  C750   9833 C309      NAM2	CB	*R3+,@SPACE		; END
  C754   13FD           	JEQ	NAM2		;KEEP LOOKING FOR NUMBER
  C756   0603           	DEC	R3
  C758   9813 C30C      	CB	*R3,@CR
  C75C   130B           	JEQ	NAMSRCH		;USE DEFAULT TPA
  C75E   9833 C5E2      	CB	*R3+,@SWITCH	;SEE IF ANY SWITCHS ARE THERE
  C762   16B6           	JNE	PARSERR
  C764   C803 C5DC      	MOV	R3,@BUFPNT		;FOR ATOD
  C768   2DA0 C8DC      	CALL	@CATOH		;SEE IF ITS LEGAL
  C76C   C041           	MOV	R1,R1		;ZERO IS AN ERROR
  C76E   13B0           	JEQ	PARSERR
  C770   C801 C5E0      	MOV	R1,@SADDR		;SAVE AS START ADDRESS
                        ;
                        ;	USE BDOS TO SEARCH FOR FILE
                        ;
  C774   0202 0011      NAMSRCH	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C778   0203 CFD0      	LI	R3,FCB
  C77C   2DA0 D100      	CALL	@BDOS	 	;TRY TO FIND A FILE
  C780   C041           	MOV	R1,R1	 	;SUCCESS ?
  C782   1106           	JLT	NAM5		;NO FILES ON DISC
  C784   0202 0013      NAM3	LI	R2,ERAFIL 		;PURGE IF ALREADY EXITS
  C788   0203 CFD0      	LI	R3,FCB
  C78C   2DA0 D100      	CALL	@BDOS
  C790   0202 0016      NAM5	LI	R2,MAKFIL
  C794   0203 CFD0      	LI	R3,FCB
  C798   2DA0 D100      	CALL	@BDOS	 	;TRY TO MAKE THE FILE
  C79C   C041           	MOV	R1,R1	 	;SUCCESS ?
  C79E   1171           	JLT	MKERR	 	;MAKE ERROR
  C7A0   04C0           	CLR	R0
  C7A2   0204 CFD0      	LI	R4,FCB
  C7A6   D900 000B      	MOVB	R0,@FTY(R4)		;ZERO SAYS DONT CARE
  C7AA   C0E0 C5E0      	MOV	@SADDR,R3		;START ADDRESS
  C7AE   C903 0010      	MOV	R3,@FLA(R4)		;EXECUTE ADDRESS
  C7B2   04E4 001A      	CLR	@CRN(R4)		; RECORD 0 IS FOR MODULE TABLE INDEX
  C7B6   2E03           WRDATA	PUSH	R3
  C7B8   0202 001A      	LI	R2,SETDMA
  C7BC   2DA0 D100      	CALL	@BDOS
  C7C0   0202 0015      	LI	R2,WRSEQ
  C7C4   0203 CFD0      	LI	R3,FCB
  C7C8   2DA0 D100      	CALL	@BDOS
  C7CC   2E43           	POP	R3	 	;POP ADDR
  C7CE   C041           	MOV	R1,R1	 	;WRITE ERROR ?
  C7D0   1155           	JLT	WRITERR	 	;YES
                        ;
                        ;	SET FILE LIMIT
                        ;
  C7D2   0283 C200      	CI	R3,0C200H
  C7D6   1461           	JHE	LARGERR
  C7D8   0223 0200      	AI	R3,BYTSEC 		;NEXT PAGE
  C7DC   0620 C5DE      	DEC	@RECCNT	 	;FINISHED ?
  C7E0   16EA           	JNE	WRDATA		;YES
  C7E2   0202 0010      WRDATAC	LI	R2,FCLOSE	 	;NOW CLOSE THE FILE
  C7E6   0203 CFD0      	LI	R3,FCB
  C7EA   2DA0 D100      	CALL	@BDOS
  C7EE   04C1           EXIT	CLR	R1		;RETURN CODE FOR SHELL
  C7F0   0460 C4F4      	B	@RETURN		;NEED TO CALL SHELL INIT BECAUSE WE HAVE ALTERED WP
                        
                        
                        ;
                        ;*******************************************************
                        ;
                        ; ERASE A FILE FROM DISC 
                        ;
                        ;
                        ;******************************************************
  C7F4   0460 C892      ERAPERR	B	@PARSMSG
                        
  C7F8   04E0 C5DE      ERAFILE	CLR	@RECCNT
  C7FC   04E0 C5DC      	CLR	@BUFPNT
  C800   0208 0500      	LI	R8,TPA			;DEFAULT START ADDRESS
  C804   C808 C5E0      	MOV	R8,@SADDR
  C808   0208 CC66      	LI	R8,CMDLINE
  C80C   9838 C309      ERA0	CB	*R8+,@SPACE	 	;JUMP OVER 'ERA' LOOK FOR NON VALID CHARACTERS
  C810   1BFD           	JH	ERA0
  C812   0608           	DEC	R8	 		;BACK UP TO 1ST CHAR
                        ;
                        ;LOOK FOR FILE NAME
                        ;
  C814   9818 C30C      ERA01	CB	*R8,@CR			;EOL COMMAND?
  C818   13ED           	JEQ	ERAPERR
  C81A   9838 C309      	CB	*R8+,@SPACE 		;LOOK FOR NAME
  C81E   12FA           	JLE	ERA01
  C820   0608           	DEC	R8	 		;BACK UP
  C822   C0C8           	MOV	R8,R3			;R3->NAME  
  C824   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  C828   0208 CFD0      	LI	R8,FCB	  	;
  C82C   D620 C309      	MOVB	@SPACE,*R8		;FILL WITH SPACE
  C830   C088           	MOV	R8,R2	 	;SAVE FCB
  C832   9813 C309      ERA1	CB	*R3,@SPACE	 	;END OF NAME ?
  C836   1207           	JLE	ERA2	 	;YES
  C838   13DD           	JEQ	ERAPERR
  C83A   0583           	INC	R3		;UP POINTER
  C83C   0600           	DEC	R0		;DONT STORE TOO MANY
  C83E   12F9           	JLE	ERA1
  C840   0603           	DEC	R3
  C842   DCB3           	MOVB	*R3+,*R2+		;STORE IN FCB
  C844   10F6           	JMP	ERA1		;KEEP GOING
  C846   C000           ERA2	MOV	R0,R0
  C848   1204           	JLE	ERA4		;FCB ALREADY FULL
  C84A   DCA0 C309      ERA3	MOVB	@SPACE,*R2+	 	;PAD WITH SPACES
  C84E   0600           	DEC	R0
  C850   16FC           	JNE	ERA3
                        ;
                        ;	USE BDOS TO SEARCH FOR FILE
                        ;
  C852   0202 0011      ERA4	LI	R2,SEARCH1		;SEARCH RETURNS WITH R3->DIRECTORY ENTRY
  C856   0203 CFD0      	LI	R3,FCB
  C85A   2DA0 D100      	CALL	@BDOS	 	;TRY TO FIND A FILE
  C85E   C041           	MOV	R1,R1	 	;SUCCESS ?
  C860   1108           	JLT	ERAE		;NO FILES ON DISC
  C862   0202 0013      	LI	R2,ERAFIL 		;PURGE IF ALREADY EXITS
  C866   0203 CFD0      	LI	R3,FCB
  C86A   2DA0 D100      	CALL	@BDOS
  C86E   C041           	MOV	R1,R1	 	;WRITE ERROR ?
  C870   1117           	JLT	MKERR2	 	;YES
  C872   04C1           ERAE	CLR	R1		;RETURN CODE FOR SHELL
  C874   0460 C4F4      	B	@RETURN		;NEED TO CALL SHELL INIT BECAUSE WE HAVE ALTERED WP
                        
                        ;
                        ;*****************************************************************
                        ;
                        ;	OUTPUT A TEXT FILE TO THE CONSOLE
                        ;	THIS LOADS THE FILE USING .FILENAME AND THEN SENDS IT TO THE CONSOLE
                        ;
                        ;*****************************************************************
                        ;
  C878   0460 C4F4      TYPEFILE:	B	@RETURN
                        
                        ;
                        ;  ERROR MESSAGES
                        ;
  C87C   2FA0 C944      WRITERR	MESG	@ERRMSG4
  C880   100F           	JMP	MKERR2
  C882   0460 F000      MKERR	B	@MONITOR
  C886   2FA0 C934      	MESG	@ERRMSG3
  C88A   100A           	JMP	MKERR2
  C88C   2FA0 C914      CLOSERR	MESG	@ERRMSG1		;IF WE DONT CLOSE UNUSED BLOCKS MAY
  C890   1007           	JMP	MKERR2		;BE STILL ALLOCATED
  C892   2FA0 C924      PARSMSG	MESG	@ERRMSG2
  C896   0460 C51C      	B	@NEXTCMD
  C89A   2FA0 C954      LARGERR	MESG	@ERRMSG5
  C89E   1000           	JMP	MKERR2
                        	
  C8A0   0202 0010      MKERR2	LI	R2,FCLOSE		;TRY TO CLOSE THE FILE
  C8A4   0203 CFD0      	LI	R3,FCB
  C8A8   2DA0 D100      	CALL	@BDOS
  C8AC   0460 C4F4      	B	@RETURN;
                        ;
                        ;
                        ; CONVERT ASCII TO DECIMAL
                        ;
  C8B0   04C3           ATOD	CLR	R3	 		;PRESET VALUE
  C8B2   0208 000A      	LI	R8,10	 		;BASE 
  C8B6   C020 C5DC      ATOD00	MOV	@BUFPNT,R0	 		;
  C8BA   D090           	MOVB	*R0,R2	 		;GET CHAR
  C8BC   0982           	SRL	R2,8	 		;
  C8BE   0222 FFD0      	AI	R2,-'0' 		;REMOVE ASCII BIAS
  C8C2   1103           	JLT	ATOD03	 		;NOT VALID
  C8C4   0282 000A      	CI	R2,10	 		;
  C8C8   1102           	JLT	ATOD04	 		;OKAY
  C8CA   C043           ATOD03	MOV	R3,R1	 		;ANSWER
  C8CC   2DC0           	RET
  C8CE   C002           ATOD04	MOV	R2,R0
  C8D0   C083           	MOV	R3,R2
  C8D2   3888           	MPY	R8,R2
  C8D4   A0C0           	A	R0,R3
  C8D6   05A0 C5DC      	INC	@BUFPNT 
  C8DA   10ED           	JMP	ATOD00
                        ;
                        ;	CONVERT ALPHA TO HEX
                        ;
  C8DC   04C2           CATOH	CLR	R2
  C8DE   C020 C5DC      LOOP	MOV	@BUFPNT,R0
  C8E2   04C1           	CLR	R1
  C8E4   D050           	MOVB	*R0,R1
  C8E6   0281 3000      	CI	R1,'0'*256
  C8EA   1A12           	JL	NOTHEX
  C8EC   0281 3900      	CI	R1,'9'*256
  C8F0   1208           	JLE	GOTONE
  C8F2   0281 4100      	CI	R1,'A'*256
  C8F6   1A0C           	JL	NOTHEX
  C8F8   0281 4600      	CI	R1,'F'*256
  C8FC   1B09           	JH	NOTHEX
  C8FE   0221 0900      	AI	R1,0900H
  C902   0A41           GOTONE	SLA	R1,4
  C904   09C1           	SRL	R1,12
                        ;
                        ;	DIGIT TO ACCUMULATOR
                        ;
  C906   0A42           	SLA	R2,4
  C908   A081           	A	R1,R2
  C90A   05A0 C5DC      	INC	@BUFPNT
  C90E   10E7           	JMP	LOOP
                        ;
  C910   C042           NOTHEX	MOV	R2,R1
  C912   2DC0           	RET
                        ;
                        ;*****************************************************
                        ; MESSAGES
                        ;
                        ;****************************************************
  C914   2D2D 436C      ERRMSG1	TEXT	'--Close error'
  C918   6F73 6520      
  C91C   6572 726F      
  C920   72             
  C921   0D0A 00        	BYTE	0DH,0AH,0
  C924                  	EVEN
  C924   2D2D 5061      ERRMSG2 TEXT	'--Parse error'
  C928   7273 6520      
  C92C   6572 726F      
  C930   72             
  C931   0D0A 00        	BYTE	0DH,0AH,0
  C934                  	EVEN
  C934   2D2D 4D61      ERRMSG3 TEXT	'--Make error'
  C938   6B65 2065      
  C93C   7272 6F72      
  C940   0D0A 00        	BYTE	0DH,0AH,0
  C943   00             	EVEN
  C944   2D2D 5772      ERRMSG4 TEXT	'--Write error'
  C948   6974 6520      
  C94C   6572 726F      
  C950   72             
  C951   0D0A 00        	BYTE	0DH,0AH,0
  C954                  	EVEN
  C954   2D2D 4669      ERRMSG5 TEXT	'--File too large error'
  C958   6C65 2074      
  C95C   6F6F 206C      
  C960   6172 6765      
  C964   2065 7272      
  C968   6F72           
  C96A   0D0A 00        	BYTE	0DH,0AH,0
  C96D   00             	EVEN
                        ;	
                        ;*******************************************************
                        ;
                        ;	PROCEDURE INPUT
                        ;
                        ;******************************************************
                        ;
  C96E   0204 0040      PFETCH	LI	R4,CLSZ
  C972   C804 CC50      	MOV	R4,@CMDBYTES			;BYTES LEFT IN CMDLINE
  C976   0204 CC66      	LI	R4,CMDLINE	 		;NEXT CMDLINE DEST ADDR
  C97A   C804 CC4E      	MOV	R4,@CMDADDR	
  C97E   04E0 CC60      	CLR	@SUBFLAG	
                        ;
                        ;	IS A NEW SECTOR NEEDED?
                        ;
  C982   C120 CED2      PLOOP	MOV	@MCNT,R4	 		;CHARS LEFT IN BUFFER
  C986   1626           	JNE	BUFMOVE	 		;YES, MOVE NEXT CHAR
                        ;
                        ;ANY	MORE	SECTORS	IN THE FILE
                        ;
  C988   C120 CCBE      	MOV	@MFSZ,R4	
  C98C   1321           	JEQ	PROCERR1			;NO,END OF FILE
                        ;
                        ;READ	NEXT	SECTOR
                        ;
  C98E   0203 0000      	LI	R3,DEFDRV
  C992   0202 000E      	LI	R2,SELDSK
  C996   2DA0 D100      	CALL	@BDOS	 
  C99A   0203 CCD0      	LI	R3,MBUF	 			;USE THIS BUFFER
  C99E   0202 001A      	LI	R2,SETDMA
  C9A2   2DA0 D100      	CALL	@BDOS	
  C9A6   0203 CFD0      	LI	R3,FCB	
  C9AA   0202 0014      	LI	R2,RDSEQ	 		;READ 1 SECTOR<--
  C9AE   2DA0 D100      	CALL	@BDOS		 		;
  C9B2   C041           	MOV	R1,R1	 			;TROUBLE ?
  C9B4   110B           	JLT	PROCERR0	 		;YES
  C9B6   0201 0200      	LI	R1,BLKSIZ	 		;INIT MCNT
  C9BA   C801 CED2      	MOV	R1,@MCNT	 		;
  C9BE   0204 CCD0      	LI	R4,MBUF	 			;INIT NEXT BUFFER ADDR
  C9C2   C804 CED4      	MOV	R4,@MADDR	
  C9C6   0620 CCBE      	DEC	@MFSZ	 			;DECR PROC FILE SIZE(SECTORS LEFT)
  C9CA   1004           	JMP	BUFMOVE	
  C9CC   0460 CB00      PROCERR0	B	@SHELLERR	
  C9D0   0460 CB22      PROCERR1	B	@UNPROC	
                        ;
                        ;-----MOVE NEXT	BYTE TO CMDLINE FROM PROC BUFFER
                        ;
  C9D4   C120 CED4      BUFMOVE	MOV	@MADDR,R4	
  C9D8   D074           	MOVB	*R4+,R1	
  C9DA   C804 CED4      	MOV	R4,@MADDR	
  C9DE   0620 CED2      	DEC	@MCNT	 		;DECR MCNT
  C9E2   2E01           	PUSH	R1	 		;PUSH R1
  C9E4   C020 CC60      	MOV	@SUBFLAG,R0			;PREV CHAR A SUBSTITUTION MARKER? 
  C9E8   1621           	JNE	PARMSUB	 		;YES
  C9EA   2E41           	POP	R1			;NO 
  C9EC   9801 C316      	CB	R1,@SUBMARK	 		;THIS CHAR A SUB MARKER?
  C9F0   1603           	JNE	BUFMOV2	 		;NO
  C9F2   0720 CC60      	SETO	@SUBFLAG	 		;YES,SET FLAG
  C9F6   10C5           	JMP	PLOOP	 		;AND CONTINE
  C9F8   9801 C30F      BUFMOV2	CB	R1,@EOF	 		;PDS EOF FLAG?
  C9FC   1313           	JEQ	BUFMOV4			;YES,EOF
  C9FE   9801 0000      	CB	R1,@PAD	 		;SMALL-VM PAD CHAR?
  CA02   1310           	JEQ	BUFMOV4			;YES,EOF
  CA04   9801 C30D      BUFMOV3	CB	R1,@LF	 		;LF?
  CA08   13BC           	JEQ	PLOOP	 		;YES,IGNORE IT
  CA0A   C120 CC4E      BUFPUT	MOV	@CMDADDR,R4	 	;NEXT CMDLINE ADDR
  CA0E   D501           	MOVB	R1,*R4	
  CA10   9801 C30C      	CB	R1,@CR	 		;CR?
  CA14   1331           	JEQ	PEOL	 		;YES,CMD IS FETCHED
  CA16   0584           	INC	R4	
  CA18   C804 CC4E      	MOV	R4,@CMDADDR	
  CA1C   0620 CC50      	DEC	@CMDBYTES	 	;CMDLINE BYTES LEFT
  CA20   1303           	JEQ	MOVERR	  		;NO SPACE LEFT,ABORT PROC
  CA22   10AF           	JMP	PLOOP	 		;YES,GO FOR NEXT BYTE
  CA24   0460 CB22      BUFMOV4	B	@UNPROC	
  CA28   0460 CAF0      MOVERR	B	@LINERR	
                        ;
                        ;----PARAMETER	SUB(R1	ON	TOP OF STACK)
                        ;
  CA2C   04E0 CC60      PARMSUB	CLR	@SUBFLAG	 		;CLEAR SUB FLAG
  CA30   2E41           	POP	R1	 		;FETCH CAHR FOLLOWING SUBST MARKER
  CA32   2E01           	PUSH	R1	 		;AND SAVE IT AGAIN
  CA34   0981           	SRL	R1,8	
  CA36   0221 FFE0      	AI	R1,0FFE0H		;REDUCE ASCII BYTE TO INTEGER(-30)
  CA3A   1119           	JLT	NOSUB	 		;LT ZERO
  CA3C   0281 000A      	CI	R1,10	
  CA40   1516           	JGT	NOSUB	 		;GT 9
  CA42   C081           	MOV	R1,R2	 		;PPTR OFFSET
  CA44   2E41           	POP	R1	 		;WASTE TOP OF STACK
  CA46   0204 CF78      	LI	R4,PPTRS	 		;1ST PPTR ADDR
  CA4A   C0D4           SUBLOOP	MOV	*R4,R3	 		;R3=NEXT PPTR
  CA4C   1312           	JEQ	NULLPARM	
  CA4E   0602           	DEC	R2	
  CA50   15FC           	JGT	SUBLOOP	
                        ;
                        ;-PPTR	FOUND
                        ;
  CA52   D053           SUBLOOP2	MOVB	*R3,R1	 	;FETCH NEXT PARM CHAR
  CA54   9060 C309      	CB	@SPACE,R1	 	;END OF PARM(LE SPACE)?
  CA58   1194           	JLT	PLOOP	 		;YES,CONTINUE
  CA5A   0583           	INC	R3	 		;BUMP PARM BYTE ADDR
  CA5C   C120 CC4E      	MOV	@CMDADDR,R4	 		;STORE BYTE IN CMDLINE
  CA60   DD01           	MOVB	R1,*R4+	 		;ALSO BUMP BYTE ADDR
  CA62   C804 CC4E      	MOV	R4,@CMDADDR	
  CA66   0620 CC50      	DEC	@CMDBYTES	 		;DECR BYTES LEFT IN CMDLINE
  CA6A   1342           	JEQ	LINERR	 		;NO SPACE LEFT,ABORT PROC!
  CA6C   10F2           	JMP	SUBLOOP2	
                        ;
                        ;NON-NUMERIC	CHAR	FOLLOWS	SUBSTITUTION MARKER
                        ;--TREAT	NORMAL
                        ;
  CA6E   2E41           NOSUB	POP	R1	 		;RESTORE CHAR
  CA70   10C3           	JMP	BUFMOV2	 		;AND CONTINUE
                        ;
                        ;-NO	PARAMETER	GIVEN	FOR SUBSTITUTION
                        ;--SUB	NULL	STRING
                        ;
  CA72   0201 0A00      NULLPARM	LI	R1,0A00H 			;FORCE BYTE TO BE SKIPPED
  CA76   10C6           	JMP	BUFMOV3	
                        ;
                        ;----END OF PROCEDURE LINE
                        ;
  CA78   D060 CC66      PEOL	MOVB	@CMDLINE,R1	
  CA7C   9060 C310      	CB	@COMT,R1	 		;COMMENT?
  CA80   1330           	JEQ	BPFETCH	 		;YES,IGNORE IT
  CA82   9060 C314      	CB	@NOTE,R1	 		;OPERATOR NOTE?
  CA86   1303           	JEQ	VIEW	 		;YES, DISPLAY THE LINE
  CA88   C060 CC5C      	MOV	@VSW,R1	 		;VIEW SWITCH SET?
  CA8C   1304           	JEQ	CKNSW	 		;NO
  CA8E   0204 CC66      VIEW	LI	R4,CMDLINE	 		;YES
  CA92   2DA0 CC40      	CALL	@OUTSTR	
                        ;
  CA96   C060 CC5E      CKNSW	MOV	@NSW,R1	 		;NO-EXECUTE SWITCH SET?
  CA9A   1623           	JNE	BPFETCH	 		;YES,GO FOR NEXT COMMAND LINE
  CA9C   D060 CC66      	MOVB	@CMDLINE,R1	 		;OPERATOR NOTE?
  CAA0   9060 C314      	CB	@NOTE,R1	
  CAA4   1620           	JNE	BTDOCMD	 		;NO;PROCESS THE COMMAND LINE
  CAA6   0204 CC66      	LI	R4,CMDLINE	
  CAAA   0584           	INC	R4	
  CAAC   9814 C314      	CB	*R4,@NOTE			;OPERATOR RESPONCE?
  CAB0   1618           	JNE	BPFETCH			;NO
  CAB2   0204 CF6A      WAIT	LI	R4,WAITMSG	
  CAB6   2DA0 CC40      	CALL	@OUTSTR
  CABA   04C1           	CLR	R1			;WAIT FOR A RESPONCE
  CABC   2DA0 0001      	CALL	@CIN			;<---
  CAC0   2E01           	PUSH	R1			;ECHO CR,LF
  CAC2   D0E0 C30C      	MOVB	@CR,R3	
  CAC6   2DA0 CC18      	CALL	@OUTCHAR	
  CACA   2E41           	POP	R1	
  CACC   9801 C30C      	CB	R1,@CR			;CR?
  CAD0   1308           	JEQ	BPFETCH			;YES,CONTINE
  CAD2   9801 C304      	CB	R1,@CTLC			;^C?
  CAD6   1325           	JEQ	UNPROC			;YES,ABORT PROC
  CAD8   9801 C306      	CB	R1,@CTLS			;^S?
  CADC   16EA           	JNE	WAIT			;NO,KEEP WAITING
  CADE   0720 CC5A      	SETO	@SKIPSW			;SET SKIP SWITCH 
  CAE2   0460 C96E      BPFETCH	B	@PFETCH			;FETCH NEXT PROC COMMAND 
  CAE6   0460 C378      BTDOCMD	B	@DOCMD	
                        ;
                        ;-----ERROR	ROUTINES
                        ;
  CAEA   0204 CC66      CMDERR	LI	R4,CMDLINE	
  CAEE   1014           	JMP	ERROUT	
  CAF0   C0A0 C30C      LINERR	MOV	@CR,R2	
                        	;CALL	@OUTCHAR	
  CAF4   0204 CF49      	LI	R4,LINEMSG	
  CAF8   100F           	JMP	ERROUT	
  CAFA   0204 CF33      PARMERR	LI	R4,PARMSG	
  CAFE   100C           	JMP	ERROUT	
  CB00   0204 CF21      SHELLERR	LI	R4,SHELLMSG
  CB04   1009           	JMP	ERROUT	
  CB06   0204 CF59      HARDERR	LI	R4,HARDMSG	
  CB0A   1006           	JMP	ERROUT	
  CB0C   0204 CF06      NULLERR	LI	R4,NULLMSG	
  CB10   1003           	JMP	ERROUT	
  CB12   0204 CF09      NESTERR	LI	R4,NESTMSG	
  CB16   1000           	JMP	ERROUT	 
                        ERROUT
  CB18   2FA0 CF07      	MESG	@QUESTMSG
  CB1C   2F94           	MESG	*R4
  CB1E   2FA0 C626      	MESG	@CRLF
                        ;
                        ;-----TERMINATE	PROCEDURE	PROCESSING
                        ;
  CB22   04E0 CC58      UNPROC	CLR	@PROCSW	 		;CLEAR SWITCH 
  CB26   0204 C390      	LI	R4,CHKSYS	 	; 
  CB2A   05C4           	INCT	R4	 		;POINT TO COMPARE WORD
  CB2C   D520 C317      	MOVB	@SYSFILE,*R4		;REJECT FUTURE SYS FILE REFS
  CB30   0460 C4F4      	B	@RETURN	 		;RESETS SP & GOES TO PROMPT
                        ;
                        ;----INITIATE	PROCEDURE	PROCESSING
                        ;
  CB34   C060 CC58      DOPROC	MOV	@PROCSW,R1	 		;ALREADY IN A PROC?
  CB38   16EC           	JNE	NESTERR	 		;YES,BUT CAN'T NEST THEM
  CB3A   0701           	SETO	R1	 		;NO,SET PROC SWITCH
  CB3C   C801 CC58      	MOV	R1,@PROCSW	
  CB40   0203 CFD0      	LI	R3,FCB			;SET PROC FDE FIELDS
  CB44   0204 CCAE      	LI	R4,MNAM			;DEST 
  CB48   0202 0010      	LI	R2,16			; 
  CB4C   2DA0 CC04      	CALL	@BMOVE	
  CB50   04C4           	CLR	R4	 		;FORCE FIRST DISK READ
  CB52   C804 CED2      	MOV	R4,@MCNT	
                        ;
                        ;---PARSE	PROCEDURE	PARAMETERS
                        ;
  CB56   04E0 CC5C      	CLR	@VSW	 		;CLEAR VIEW SWITCH
  CB5A   04E0 CC5E      	CLR	@NSW	 		;CLEAR NO-EXECUTE SWITHC
  CB5E   0204 CF78      	LI	R4,PPTRS	 		;INIT PPADDR
  CB62   C804 CFCE      	MOV	R4,@PPADDR	
  CB66   0203 CF8E      	LI	R3,PBUF	 		;INIT DEST ADDR (R3)
  CB6A   0204 CC66      	LI	R4,CMDLINE	 		;INIT SOURCE ADDR (R4)
  CB6E   0202 000A      	LI	R2,10	 		;MAX PARMS ALLOWED 
  CB72   04C0           	CLR	R0	 		;R0 = WORD SWITCH(ZERO BETWEEN WORDS)
  CB74   04C1           PARSLOOP	CLR	R1	
  CB76   D074           	MOVB	*R4+,R1			;LOAD NEXT BYTE
  CB78   0281 2D00      	CI	R1,2D00H 		;CMD LINE SWITCH(-)?
  CB7C   161A           	JNE	PARS1	 		;NO
  CB7E   C000           	MOV	R0,R0	 		;BEGINNING OF WORD?
  CB80   1616           	JNE	PARS0B	 		;NO,CONTINUE
  CB82   0584           	INC	R4	
  CB84   D054           	MOVB	*R4,R1	 		;TEST 3RD BYTE
  CB86   0604           	DEC	R4	
  CB88   0281 2000      	CI	R1,2000H 		;SPACE OR CTL CHAR?
  CB8C   1B10           	JH	PARS0B	 		;NO,CONTINUE
  CB8E   D054           	MOVB	*R4,R1	 		;TEST 2ND BYTE
  CB90   0281 5600      	CI	R1,5600H 		;-V?
  CB94   1604           	JNE	PARS0A	 		;NO
  CB96   C801 CC5C      	MOV	R1,@VSW	 		;YES,SET VIEW SWITCH
  CB9A   0584           PARS0	INC	R4	 		;AND DROP SWITCH FROM THE COMMAND
  CB9C   10EB           	JMP	PARSLOOP	
  CB9E   0281 4E00      PARS0A	CI	R1,4E00H 		;-N?
  CBA2   1605           	JNE	PARS0B	 		;NO-CONTINUE
  CBA4   0201 2D00      	LI	R1,2D00H 		;RESTORE CHAR
  CBA8   C801 CC5E      	MOV	R1,@NSW	 		;YES-SET NO EXECUTE SWITCH
  CBAC   10F6           	JMP	PARS0	 		;
  CBAE   0201 2D00      PARS0B	LI	R1,2D00H		;RESTORE CHAR 
                        ;
                        ;
  CBB2   DCC1           PARS1	MOVB	R1,*R3+	
  CBB4   0281 0D00      	CI	R1,0D00H 		;END OF LINE?
  CBB8   1321           	JEQ	PARSEND	 		;YES
  CBBA   0281 2000      	CI	R1,2000H 		;SPACE OR CTL CHAR?
  CBBE   1B04           	JH	PARS2	 		;NO
  CBC0   C000           	MOV	R0,R0	 		;YES,WORD SWITCH CLEAR?
  CBC2   13D8           	JEQ	PARSLOOP	 		;YES,CONTINUE
  CBC4   04C0           	CLR	R0	 		;NO,CLEAR IT AND CONTINUE
  CBC6   10D6           	JMP	PARSLOOP	
                        ;
  CBC8   C000           PARS2	MOV	R0,R0	 		;IS WORD SWITCH SET?
  CBCA   16D4           	JNE	PARSLOOP	 		;YES,CONTINUE
  CBCC   0700           	SETO	R0			;NO,SET IT
  CBCE   0602           	DEC	R2	 		;WILL NEXT PARM FIT PPTRS ARRAY?
  CBD0   1194           	JLT	PARMERR	 		;NO
                        ;
                        ;	LOAD NEXT PARM PTR
                        ;
  CBD2   2E04           	PUSH	R4	 		;SOURCE
  CBD4   2E03           	PUSH	R3	 		;DEST
  CBD6   0603           	DEC	R3	
  CBD8   D054           	MOVB	*R4,R1			;2ND SOURCE CHAR<=SPACE?
  CBDA   0281 2000      	CI	R1,2000H	
  CBDE   1506           	JGT	PARS3	 		;NO CAN'T BE NULL PARAMETER
  CBE0   9813 C312      	CB	*R3,@NULPARM			;1ST DEST CHAR A NULL PARAMETER?
  CBE4   1603           	JNE	PARS3	 		;NO
  CBE6   0201 2000      	LI	R1,2000H 		;YES,FORCE PARM DELIMITER
  CBEA   D4C1           	MOVB	R1,*R3	
  CBEC   C120 CFCE      PARS3	MOV	@PPADDR,R4	 
  CBF0   CD03           	MOV	R3,*R4+	
  CBF2   C804 CFCE      	MOV	R4,@PPADDR	
  CBF6   2E43           	POP	R3	 		;DEST
  CBF8   2E44           	POP	R4	 		;SOURCE
  CBFA   10BC           	JMP	PARSLOOP	
                        ;
                        ;-----TERMINATE	PARSING
                        ;
  CBFC   04E0 CFCE      PARSEND	CLR	@PPADDR			;CAP PPTRS WITH A NULL WORD
  CC00   0460 C96E      	B	@PFETCH	 		;GO PROCESS THE PROC
                        ;
                        ;----BLOCK	MOVE	ROUTINE
                        ;
  CC04   DD33           BMOVE	MOVB	*R3+,*R4+	
  CC06   0602           	DEC	R2	
  CC08   16FD           	JNE	BMOVE	
  CC0A   2DC0           	RET	
                        ;
                        ;INPUT	CHAR INTO MSB OF R1
                        ;
  CC0C   0202 0001      INCHAR	LI	R2,CIN	 		; 
  CC10   2DA0 D100      	CALL	@BDOS	 		;GET CHAR
  CC14   06C1           	SWPB	R1			;PLACE CHAR IN MSB
  CC16   2DC0           	RET	 		;
                        ;
                        ;	
                        ;   OUTPUT CHAR IN MSB OF R3 TO THE CONSOLE
                        ;   CHARACTER RETURNED IN MSB OF R1
                        ;   AUTO LF
                        ;
  CC18   2E03           OUTCHAR	PUSH	R3			;SAVE CHAR
  CC1A   06C3           	SWPB	R3		;DOS PRINTS LSB BYTE
  CC1C   0202 0002      	LI	R2,COUT	 		;
  CC20   2DA0 D100      	CALL	@BDOS
  CC24   2E43           	POP	R3
  CC26   9803 C30C      	CB	R3,@CR	 		;CR?
  CC2A   1609           	JNE	OUT0	 		;NO
  CC2C   D0E0 C30D      	MOVB	@LF,R3	 		;YES,GENERATE LF
  CC30   06C3           	SWPB	R3			;DOS PRINTS LSB BYTE
  CC32   0202 0002      	LI	R2,COUT
  CC36   2DA0 D100      	CALL	@BDOS
  CC3A   0203 0D0A      	LI	R3,0D0AH			;DONE FOR SHELL
  CC3E   2DC0           OUT0	RET
                        ;
                        ;----OUTPUT	A STRING TO THE CONSOLE
                        ;
  CC40   D0D4           OUTSTR	MOVB	*R4,R3
                        ;	SRL	R3,8 
  CC42   1304           	JEQ	STR0	
  CC44   0584           	INC	R4	
  CC46   2DA0 CC18      	CALL	@OUTCHAR	
  CC4A   10FA           	JMP	OUTSTR	
  CC4C   2DC0           STR0	RET
                        ;
                        ;
                        ;----MISC	VARIABLES
                        ;
  CC4E   0000           CMDADDR	WORD	0			;CUR CMDLINE ADDR
  CC50   0000           CMDBYTES	WORD	0	 		;CMDLINE BYTES LEFT
  CC52   0000           DOSV	WORD	0	 		;DOS WARM START VECTOR
  CC54   0000           HDERRV	WORD	0	 		;DOS HARD ERROR VECTOR
  CC56   0000           DOSERRV	WORD	0	 		;DOS FILENAME ERROR VECTOR
  CC58   0000           PROCSW	WORD	0			;PROC SWITCH
  CC5A   0000           SKIPSW	WORD	0			;SKIP NEXT PROC CMD
  CC5C   0000           VSW	WORD	0			;VIEW SWITCH
  CC5E   0000           NSW	WORD	0			;NO-EXECUTE SWITCH
  CC60   0000           SUBFLAG	WORD	0	 		;PARM SUBST FLAG
  CC62   0000           LADDR	WORD	0	;
                        ;
                        ;-----SHELL COMMAND LINE
                        ;
  CC64   0000           VMENTRY	WORD	0			;CONTROLS SMALL-VM PROG REENTRY FEATURE
  CC66   2A42 4F4F      CMDLINE	TEXT	"*BOOT"
  CC6A   54             
  CC6B   0D00           	BYTE	0DH,00
  CC6D                  	BSS	CLSZ	 		;COMMAND BUFF
  CCAD   00             	EVEN
                        
                        	
                        ;
                        ;
                        ;----PROCEDURE	FDE & BUFFER FIELDS 
                        ;
  CCAE                  	EVEN
  CCAE                  MNAM	BSS	NAMSIZ			; 	 
  CCB9                  	BSS	2	 		;RIB
  CCBB   00             	EVEN		   
                        ;
  CCBC   0000           MFTY	WORD	0			;
  CCBE   0000           MFSZ	WORD	0			;SECTORS REMAINING 
  CCC0   0000           MNRR	WORD	0	 		;NRR
  CCC2   0000           MCBF	WORD	0
  CCC4   0000           MTSC	WORD	0
  CCC6   0000           MDRV	WORD	0	 		;DRIVE #
  CCC8                  	BSS	8			;PART OF FRI (SPARE)	
  CCD0                  MBUF:	BSS	BUFFSIZ+2			;PROC BUFFER 1 SECTOR
  CED2   0000           MCNT	WORD	0			;BYTES LEFT IN BUFFER
  CED4   0000           MADDR	WORD	0			;CURRENT BUFFER BYTE ADDR 
                        ;
                        ;----MESSAGES
                        ;
  CED6   0D0A           SINON	BYTE	0DH,0AH
  CED8   5368 656C      	TEXT	'Shell Version 4.1'
  CEDC   6C20 5665      
  CEE0   7273 696F      
  CEE4   6E20 342E      
  CEE8   31             
  CEE9   0D0A           	BYTE	0DH,0AH
  CEEB   5265 6C65      	TEXT	'Release date 28 August 24'
  CEEF   6173 6520      
  CEF3   6461 7465      
  CEF7   2032 3820      
  CEFB   4175 6775      
  CEFF   7374 2032      
  CF03   34             
  CF04   0D0A           	BYTE	0DH,0AH
  CF06   00             NULLMSG 	BYTE 	0
                        ;
  CF07   3F             QUESTMSG 	TEXT 	"?"
  CF08   00             	BYTE	0
                        ;
  CF09   5072 6F67      NESTMSG	TEXT	"Program name expected:"
  CF0D   7261 6D20      
  CF11   6E61 6D65      
  CF15   2065 7870      
  CF19   6563 7465      
  CF1D   643A           
  CF1F   0D00           	BYTE 	0DH,00
                        ;
  CF21   5368 656C      SHELLMSG 	TEXT 	"Shell error:"
  CF25   6C20 6572      
  CF29   726F 723A      
  CF2D   0D00           	BYTE	0DH,00H
                        ;
  CF2F   0820 0800      RUBMSG	BYTE	08H,20H,08H,0
                        ;
  CF33   546F 6F20      PARMSG	TEXT	"Too many parameters:"
  CF37   6D61 6E79      
  CF3B   2070 6172      
  CF3F   616D 6574      
  CF43   6572 733A      
  CF47   0D00           	BYTE	0DH,00
                        ;
  CF49   4C69 6E65      LINEMSG	TEXT	"Line too long:"
  CF4D   2074 6F6F      
  CF51   206C 6F6E      
  CF55   673A           
  CF57   0D00           	BYTE	0DH,00
                        ;
  CF59   4841 5244      HARDMSG	TEXT	"HARD DISK ERROR"
  CF5D   2044 4953      
  CF61   4B20 4552      
  CF65   524F 52        
  CF68   0D00           	BYTE	0DH,00
                        ;
  CF6A   2D2D 7761      WAITMSG	TEXT	"--waiting..."
  CF6E   6974 696E      
  CF72   672E 2E2E      
  CF76   00             	BYTE	0
                        ;
                        ;----PARAMETER	POINTERS,BUFFER	ETC.
                        ;
  CF77   00             	EVEN
  CF78                  PPTRS	BSS	22	 	;11 WORDS 
  CF8E                  PBUF	BSS	64	 	;PARM BUUFER 
  CFCE   0000           PPADDR	WORD	0		;ADDR OF CUR PARM PTR
                        ;WORKSP	BSS	32		;GENERAL SHELL WORKSPACE PASSED ONTO LOADED PROGRAMMES SO THAT THEY CAN RETURN
  CFD0                  FCB	BSS	36 		;FCB MUST BE 36 BYTES LONG
                        ;
                        ;XOP0:	MOV	@2*R10(WP),R10		;GET SP
                        ;	DECT	SP		;DECREMENT STACK POINTER
                        ;	MOV	R14,*R10		;PUSH RETURN ADDRESS
                        ;	MOV	SP, @2*R10(WP)		;UPDATE STACK
                        ;	LWPI	WP		;LOAD CALLING WP
                        ;	B	@BDOSV
  CFF4                  	END	

No error(s).
LOOKERR          C46C  SP               000A  MNAM             CCAE  GOLOOP           C4DA  
OUT0             CC3E  CINLOOP          C536  EXIT             C7EE  DLOOK1           C3E2  
CCOUNT           C634  DLOOK2           C3EA  PARMSG           CF33  DLOOK3           C414  
FTY              000B  DLOOK4           C41C  MOVERR           CA28  DLOOK5           C40C  
NULLMSG          CF06  DLOOK6           C400  R10              000A  DLOOK7           C408  
ERA0             C80C  FCB              CFD0  ERA2             C846  EXTSIZ           0003  
ERA4             C852  FSB              000C  MNOFILE          C629  R12              000C  
DSKSAVE          C6D4  OUTSTR           CC40  NAM0             C730  LOAD4            C484  
NAM2             C750  MFTY             CCBC  NAM1             C744  SINON            CED6  
NAM4             C748  PLOOP            C982  ERAE             C872  PNAME            C67C  
PARS2            CBC8  MONITOR          F000  DSKDIR           C636  SUBFLAG          CC60  
SADDR            C5E0  LOAD0            C4A0  LOOK             C3D2  BMOVE            CC04  
VIEW             CA8E  WRDATA           C7B6  BTDOCMD          CAE6  MEMLIMIT         00B0  
DCOMR            0001  PNAME1           C68E  JUMP             C311  PNAME2           C694  
DOSV             CC52  PNAME3           C6BA  DSKDIR1          C666  EXT              C313  
WRITE            2F00  NULPARM          C312  RUBOUT           C598  OUTCHAR          CC18  
CMDL_SIZE        00A2  PARS0            CB9A  ERRMSG4          C944  SKIPSW           CC5A  
ICMD2            C614  PROMPT           C526  SHELLMSG         CF21  GO               C4F0  
R0               0000  BPFETCH          CAE2  R2               0002  TPA              0500  
R4               0004  BLKSIZ           0200  R6               0006  BUFPNT           C5DC  
R9               0009  PARS0A           CB9E  RDSEQ            0014  BDOSV            0084  
CTLC             C304  PARS0B           CBAE  EOF              C30F  PARMERR          CAFA  
CTLS             C306  CR               C30C  CTLX             C305  CBN              0018  
CTLZ             C308  PARSERR          C6D0  POP              2E40  BUFMOV4          CA24  
FLA              0010  PARSLOOP         CB74  INIT22           C344  CIN              0001  
MESG             2F80  QUESTMSG         CF07  WAIT             CAB2  STOWIT           C558  
SELDSK           000E  MADDR            CED4  BUFPUT           CA0A  CRN              001A  
ATOD00           C8B6  NAMSRCH          C774  ATOD04           C8CE  RUBMSG           CF2F  
PROCSW           CC58  LARGERR          C89A  CMDERR           CAEA  RET              2DC0  
STRT01           C712  CHKSYS           C390  PUSHREG          2D00  NOTHEX           C910  
PAD              0000  NOSUB            CA6E  VSW              CC5C  BUFFSIZ          0200  
NULLPARM         CA72  NESTMSG          CF09  BS               C30B  BDOS             D100  
NESTERR          CB12  ERRMSG2          C924  LADDR            CC62  WORKSP           0230  
ERRMSG5          C954  CATOH            C8DC  GOPROG           C4D0  RECCNT           C5DE  
WAITMSG          CF6A  ICMD0            C5F0  SYSFILE          C317  HDERR            0000  
SUBLOOP          CA4A  DOPROC           CB34  COMT             C310  HARDERR          CB06  
STR0             CC4C  BUFMOVE          C9D4  SUBLOOP2         CA52  START00          C6E8  
R14              000E  ECHO             C586  LINEMSG          CF49  LOAD             C470  
EXEC             0002  ICMDE            C620  DEFDRV           0000  NULLERR          CB0C  
ERA1             C832  RETURN           C4F4  PROC             0005  MBUF             CCD0  
MDRV             CCC6  STACKP           0500  NAM3             C784  SETDMA           001A  
MNRR             CCC0  HDERRV           CC54  PFETCH           C96E  LOAD5            C48A  
MCNT             CED2  NOTE             C314  ERA01            C814  SWITCH           C5E2  
SEARCH2          0012  NEXTCMD          C51C  DOSERR           0000  DDEN             0001  
PARMSUB          CA2C  UNPROC           CB22  FCLOSE           0010  ERAFILE          C7F8  
POPREG           2D40  DIREXIT          C6BC  R1               0001  LF               C30D  
R5               0005  RELB             001C  MAKFIL           0016  LOAD1            C4C4  
CRLF             C626  BYTSEC           0200  R15              000F  RELR             001E  
VMENTRY          CC64  CMDPTR           00A0  SPACE            C309  CLOSERR          C88C  
LOAD3            C476  PARS1            CBB2  PARSEND          CBFC  FREEMEM          00A6  
ATOD03           C8CA  DOCMD2A          C3B0  PARS3            CBEC  DOCMDAA          C3A4  
CMDCNT           0004  SETREG           2C80  BAR              C622  CONSOLE          0000  
DEBUG            2FC0  LINERR           CAF0  BUFMOV3          CA04  SHELLBV          0080  
WP               000D  CKNSW            CA96  NSW              CC5E  ICMD             C5E4  
ERRMSG1          C914  ERROUT           CB18  PBUF             CF8E  CMDBYTES         CC50  
HARDMSG          CF59  SEARCH1          0011  CMDLINE          CC66  BUFVECT          00A4  
LOAD2            C498  SHELL            C300  PROM             C315  CLSZ             0040  
ERA3             C84A  ICLIST           C5C2  LOOP             C8DE  FOPEN            000F  
GOTONE           C902  SUBMARK          C316  BUFMOV2          C9F8  DSKDIR0          C64C  
MCBF             CCC2  MKERR            C882  R8               0008  CMDADDR          CC4E  
START02          C6F0  ERAFIL           0013  FSZ              000E  DOCMD            C378  
MTSC             CCC4  PARSMSG          C892  GODOCMD          C5B0  MKERR2           C8A0  
PPADDR           CFCE  CMDL_PTR         00A0  DEL              C30E  DOSCMD           C318  
INCHAR           CC0C  ERRMSG3          C934  PPTRS            CF78  MLOAD            001B  
PUSH             2E00  DOCMD1           C39A  PEOL             CA78  DOCMD2           C3AA  
DOSERRV          CC56  DOCMD3           C3C8  READ             2F40  INIT             C31A  
R3               0003  PROCERR1         C9D0  CTLY             C307  CIOERR           C5BE  
MFSZ             CCBE  DOCMD4           C3B4  COUT             0002  ICMD1            C610  
ATOD             C8B0  DOCMD9           C3CE  NAM              0000  WRDATAC          C7E2  
RHEX             2EC0  ERAPERR          C7F4  CALL             2D80  PROCERR0         C9CC  
WHEX             2E80  NAMSIZ           000B  WRITERR          C87C  R11              000B  
WRSEQ            0015  NAM5             C790  SHELLERR         CB00  TYPEFILE         C878  
STOWIT2          C572  NOFILE           C6C6  
